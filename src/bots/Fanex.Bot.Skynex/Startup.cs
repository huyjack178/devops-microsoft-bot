//<auto-generated />

using System;
using System.Linq;
using Fanex.Bot.Common.Helpers.Web;
using Fanex.Bot.Core._Shared.Database;
using Fanex.Bot.Core._Shared.Enumerations;
using Fanex.Bot.Core.Bot.Services;
using Fanex.Bot.Core.ExecuteSP.Services;
using Fanex.Bot.Core.Log.Services;
using Fanex.Bot.Core.UM.Services;
using Fanex.Bot.Core.Zabbix.Services;
using Fanex.Bot.Skynex._Shared.Base;
using Fanex.Bot.Skynex._Shared.MessageSenders;
using Fanex.Bot.Skynex._Shared.MessengerFormatters;
using Fanex.Bot.Skynex.AppCenter;
using Fanex.Bot.Skynex.Bot;
using Fanex.Bot.Skynex.ExecuteSP;
using Fanex.Bot.Skynex.GitLab;
using Fanex.Bot.Skynex.Log;
using Fanex.Bot.Skynex.Sentry;
using Fanex.Bot.Skynex.UM;
using Fanex.Bot.Skynex.Zabbix;
using Hangfire;
using Hangfire.Dashboard;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Bot.Connector;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using RestSharp;
using Conversation = Fanex.Bot.Skynex._Shared.MessageSenders.Conversation;

namespace Fanex.Bot
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            ConfigureCommonMiddlewares(services);
            ConfigureHangfire(services);
            ConfigureDbContext(services);
            ConfigureAttributes(services);
            ConfigureBotServices(services);
            ConfigureBotMessageHandlers(services);
            ConfigureBotDialog(services);
            ConfigureBotAuthentication(services);

            services.AddMvc(options =>
                {
                    options.Filters.Add(typeof(TrustServiceUrlAttribute));
                })
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
        }

#pragma warning disable S1075 // URIs should not be hardcoded

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseCors(x => x
                .AllowAnyMethod()
                .AllowAnyHeader()
                .SetIsOriginAllowed(origin => true) // allow any origin
                .AllowCredentials()); 
            app.UseExceptionHandler("/api/Error/");

            app.UseHangfireDashboard(options: new DashboardOptions
            {
                Authorization = Enumerable.Empty<IDashboardAuthorizationFilter>(),
            }).UseHangfireServer();

            app.UseStaticFiles();
            app.UseAuthentication();
            app.UseMvc();
        }

#pragma warning restore S1075 // URIs should not be hardcoded

        private static void ConfigureAttributes(IServiceCollection services)
        {
            services.AddScoped<GitLabAttribute>();
        }

        private void ConfigureDbContext(IServiceCollection services)
        {
            services.AddDbContext<BotDbContext>(options =>
                options.UseSqlServer(
                    Configuration.GetConnectionString("DefaultConnection")));
        }

        private void ConfigureCommonMiddlewares(IServiceCollection services)
        {
            services.AddCors(options =>
            {
                options.AddPolicy("CorsPolicy",
                    builder => builder.AllowAnyOrigin()
                        .AllowAnyMethod()
                        .AllowAnyHeader());
            });
            services.AddMemoryCache();
            services.AddSingleton(_ => Configuration);
            services.AddSingleton<IRestClient, RestClient>();
            services.AddSingleton<IWebClient, RestSharpWebClient>();
        }

        private void ConfigureHangfire(IServiceCollection services)
        {
            services.AddHangfire(config =>
                config.UseSqlServerStorage(Configuration.GetConnectionString("DefaultConnection")));
            services.AddSingleton<IRecurringJobManager, RecurringJobManager>();
            services.AddSingleton<IBackgroundJobClient, BackgroundJobClient>();
        }

        private static void ConfigureBotServices(IServiceCollection services)
        {
            services.AddSingleton<ILogService, LogService>();
            services.AddSingleton<IUnderMaintenanceService, UnderMaintenanceService>();
            services.AddSingleton<ITokenService, TokenService>();
            services.AddSingleton<IZabbixService, ZabbixService>();
            services.AddSingleton<IExecuteSpService, ExecuteSpService>();
        }

        private static void ConfigureBotDialog(IServiceCollection services)
        {
            services.AddScoped<ITelegramDialog, TelegramDialog>();
            services.AddScoped<IMessengerDialog, SkypeDialog>();
            services.AddScoped<ILogDialog, LogDialog>();
            services.AddScoped<IGitLabDialog, GitLabDialog>();
            services.AddScoped<IUnderMaintenanceDialog, UnderMaintenanceDialog>();
            services.AddScoped<IDBLogDialog, DBLogDialog>();
            services.AddScoped<IZabbixDialog, ZabbixDialog>();
            services.AddScoped<ISentryDialog, SentryDialog>();
            services.AddScoped<IExecuteSpDialog, ExecuteSpDialog>();
            services.AddScoped<IAppCenterDialog, AppCenterDialog>();

            services.AddScoped<Func<string, string, IDialog>>(serviceProvider => (functionTypeName, messengerTypeName) =>
            {
                switch (functionTypeName)
                {
                    case FunctionType.LogMSiteFunctionName:
                        return serviceProvider.GetService<ILogDialog>();

                    case FunctionType.LogDbFunctionName:
                        return serviceProvider.GetService<IDBLogDialog>();

                    case FunctionType.LogSentryFunctionName:
                        return serviceProvider.GetService<ISentryDialog>();

                    case FunctionType.UnderMaintenanceFunctionName:
                        return serviceProvider.GetService<IUnderMaintenanceDialog>();

                    case FunctionType.GitLabFunctionName:
                        return serviceProvider.GetService<IGitLabDialog>();

                    case FunctionType.ZabbixFunctionName:
                        return serviceProvider.GetService<IZabbixDialog>();

                    case FunctionType.ExecuteSpFunctionName:
                        return serviceProvider.GetService<IExecuteSpDialog>();

                    case FunctionType.AppCenterFunctionName:
                        return serviceProvider.GetService<IAppCenterDialog>();

                    default:
                        switch (messengerTypeName)
                        {
                            case MessengerType.TelegramMessengerTypeName:
                                return serviceProvider.GetService<ITelegramDialog>();
                            
                            default:
                                return serviceProvider.GetService<IMessengerDialog>();
                        }
                }
            });

            services.AddScoped<Func<string, IMessengerDialog>>(serviceProvider => (messengerTypeName) =>
            {
                switch (messengerTypeName)
                {
                    case MessengerType.TelegramMessengerTypeName:
                        return serviceProvider.GetService<ITelegramDialog>();

                    default:
                        return serviceProvider.GetService<IMessengerDialog>();
                }
            });

        }

        private static void ConfigureBotMessageHandlers(IServiceCollection services)
        {
            services.AddSingleton<IGitLabMessageBuilder, GitLabMessageBuilder>();
            services.AddSingleton<IWebLogMessageBuilder, WebLogMessageBuilder>();
            services.AddSingleton<IDBLogMessageBuilder, DBLogMessageBuilder>();
            services.AddSingleton<IZabbixMessageBuilder, ZabbixMessageBuilder>();
            services.AddSingleton<ISentryMessageBuilder, SentryMessageBuilder>();
            services.AddSingleton<IAppCenterMessageBuilder, AppCenterMessageBuilder>();

            services.AddSingleton<IMessageFormatter, SkypeFormatter>();
            services.AddSingleton<ITelegramFormatter, TelegramFormatter>();
            services.AddScoped<IMessengerConversation, SkypeConversation>();
            services.AddScoped<ITelegramConversation, TelegramConversation>();
            services.AddScoped<IConversation, Conversation>();

            services.AddScoped<Func<string, IMessengerConversation>>(serviceProvider => (messengerTypeName) =>
            {
                switch (messengerTypeName)
                {
                    case MessengerType.TelegramMessengerTypeName:
                        return serviceProvider.GetService<ITelegramConversation>();

                    default:
                        return serviceProvider.GetService<IMessengerConversation>();
                }
            });
        }

        private void ConfigureBotAuthentication(IServiceCollection services)
        {
            var credentialProvider = new StaticCredentialProvider(
                Configuration.GetSection(MicrosoftAppCredentials.MicrosoftAppIdKey)?.Value,
                Configuration.GetSection(MicrosoftAppCredentials.MicrosoftAppPasswordKey)?.Value);

            services.AddAuthentication(
                    options =>
                    {
                        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                    }
                )
                .AddBotAuthentication(credentialProvider);

            services.AddSingleton(typeof(ICredentialProvider), credentialProvider);
        }
    }
}